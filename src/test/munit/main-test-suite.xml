<?xml version="1.0" encoding="UTF-8" standalone="no"?><mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="   http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd   http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd   http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<!-- ### nome della suite di test ### -->
  <munit:config name="main-test-suite.xml"/>
 
  <!-- ### primo flow di test ### -->

  <!-- ### secondo flow di test ### -->
  <munit:test description="Test" doc:id="a56f6a5a-b628-4a81-bc58-1b2ef1a03f48" name="check-in-by-pnr-happy-path-test">
    <munit:behavior >
      <flow-ref name="setup-happy-sapi-mocks" doc:name="setup-happy-sapi-mocks"/>
      <flow-ref name="spy-all-mocks" doc:name="spy-all-mocks"/>     
    </munit:behavior>
    <munit:execution>
      <flow-ref name="set-check-in-event" doc:name="set-check-in-event"/>
      <flow-ref doc:id="09e1fb35-d49b-443d-bc9d-80596f6fb2a3" doc:name="check-in-by-pnr" name="check-in-by-pnr" />
    </munit:execution>
    <munit:validation>
      <flow-ref name="verify-all-mocks-are-called-once" doc:name="verify-all-mocks-are-called-once"/>
      <munit-tools:assert-that doc:name="assert-payload" doc:id="b670b673-42ff-4798-b848-980375c19e76" is="#[MunitTools::equalTo(TestData::checkInByPNRResp)]" expression="#[payload]"/>   
    </munit:validation> 
  </munit:test>

  <munit:test name="check-in-by-pnr-exception-path-test" expectedErrorType="APP:CANT_CREATE_PAYMENT">
    <munit:behavior>
      <flow-ref name="setup-happy-sapi-mocks" doc:name="setup-happy-sapi-mocks"/>
      <munit-tools:mock-when processor="flow-ref" doc:name="create-payment-for-bags">
        <munit-tools:with-attributes>
          <munit-tools:with-attribute attributeName="name" whereValue="create-payment-for-bags"/>
        </munit-tools:with-attributes>
      <munit-tools:then-return>
        <munit-tools:error typeId="APP:CANT_CREATE_PAYMENT"/>
      </munit-tools:then-return>
    </munit-tools:mock-when>
    </munit:behavior>
    <munit:execution>
      <flow-ref name="set-check-in-event" doc:name="set-check-in-event"/>
      <flow-ref name="check-in-by-pnr" doc:name="check-in-by-pnr"/>
    </munit:execution >
  </munit:test >
  
  <sub-flow name="setup-happy-sapi-mocks">
      <munit-tools:mock-when doc:name="check-in-flights-management" doc:id="39619c66-3586-42f7-9187-bac643cbde51" processor="flow-ref">
        <munit-tools:with-attributes >
          <munit-tools:with-attribute whereValue="check-in-flights-management" attributeName="name" />
        </munit-tools:with-attributes>
        <munit-tools:then-return >
          <munit-tools:payload value="#[output application/json --- {}]" />
        </munit-tools:then-return>
      </munit-tools:mock-when>
      <munit-tools:mock-when doc:name="register-passenger-data" doc:id="edff63e9-20a5-46be-b6c1-81320ad6f3f6" processor="flow-ref">
        <munit-tools:with-attributes >
          <munit-tools:with-attribute whereValue="register-passenger-data" attributeName="name" />
        </munit-tools:with-attributes>
        <munit-tools:then-return >
          <munit-tools:payload value="#[output application/json --- {}]" />
        </munit-tools:then-return>
      </munit-tools:mock-when>
      <munit-tools:mock-when doc:name="create-payment-for-bags" doc:id="abaf0b83-a07b-4e2c-a19b-4ec833c04f1c" processor="flow-ref">
        <munit-tools:with-attributes >
          <munit-tools:with-attribute whereValue="create-payment-for-bags" attributeName="name" />
        </munit-tools:with-attributes>
        <munit-tools:then-return >
          <munit-tools:payload value="#[output application/json --- {}]" />
        </munit-tools:then-return>
      </munit-tools:mock-when>     
  </sub-flow>

  <sub-flow name="spy-all-mocks">
      <munit-tools:spy doc:name="create-payment-for-bags" doc:id="728578f7-6585-4578-b31b-d09ec649a79f" processor="flow-ref">
        <munit-tools:with-attributes >
          <munit-tools:with-attribute whereValue="create-payment-for-bags" attributeName="name" />
        </munit-tools:with-attributes>
        <munit-tools:before-call >
          <munit-tools:assert-that doc:name="checkIn" doc:id="1e6ff268-53bd-426b-a92f-2b021c6a4b82" is="#[MunitTools::equalTo(TestData::checkIn)]" expression="#[vars.checkIn]"/>
        </munit-tools:before-call>
      </munit-tools:spy>  
  </sub-flow>
  
  <sub-flow name="set-check-in-event">
      <munit:set-event doc:name="Set Input" doc:id="392a356e-77b8-41a4-b804-c0c94d749da7" >
        <munit:payload value="#[output application/json --- TestData::checkIn]" />
      <munit:variables >
        <munit:variable key="PNR" value="#[TestData::pnr]" />
      </munit:variables>
      </munit:set-event>      
  </sub-flow>
  
  <sub-flow name="verify-all-mocks-are-called-once">
    <munit-tools:verify-call doc:name="check-in-flights-management" doc:id="df22007f-86f1-483d-9bfc-36eb4ceef4e0" processor="flow-ref" times="1">
        <munit-tools:with-attributes >
          <munit-tools:with-attribute whereValue="check-in-flights-management" attributeName="name" />
        </munit-tools:with-attributes>
      </munit-tools:verify-call>
      <munit-tools:verify-call doc:name="register-passenger-data" doc:id="0a115656-15db-42d5-b4a7-813684c2a1d6" processor="flow-ref" times="1">
        <munit-tools:with-attributes >
          <munit-tools:with-attribute whereValue="register-passenger-data" attributeName="name" />
        </munit-tools:with-attributes>
      </munit-tools:verify-call>
      <munit-tools:verify-call doc:name="create-payment-for-bags" doc:id="95e6d2da-fd5c-4a7a-bc82-ba6a8ac7c5f9" processor="flow-ref" times="1">
        <munit-tools:with-attributes >
          <munit-tools:with-attribute whereValue="create-payment-for-bags" attributeName="name" />
        </munit-tools:with-attributes>
      </munit-tools:verify-call>
  </sub-flow>
  
  

  <!-- [STUDIO:"start-up-test"]  <munit:test name="start-up-test" description="..." >
    <munit:execution>
      <logger/>
    </munit:execution>
  </munit:test> [STUDIO] -->
  <munit:test name="payment-approval-by-pnr-happy-path-test" doc:id="ac18001a-f7e5-429e-8120-7f9350a9b19b" >
    <munit:behavior >
      <munit-tools:mock-when doc:name="update-approvals" doc:id="a9c16613-aa91-42f5-9c82-e81b66cff9d6" processor="flow-ref">
        <munit-tools:with-attributes >
          <munit-tools:with-attribute whereValue="update-approvals" attributeName="name" />
        </munit-tools:with-attributes>
        <munit-tools:then-return >
          <munit-tools:payload value="#[output application/json  --- TestData::mockPayload]" />
        </munit-tools:then-return>
      
</munit-tools:mock-when>
      <munit:set-event doc:name="set-input" doc:id="e3be9223-ca52-446c-b4c8-5a2b400c35b0" >
        <munit:payload value="#[output application/json  --- TestData::paymentApprovalReq]" />
      </munit:set-event>
    </munit:behavior>
    <munit:execution >
      <flow-ref doc:name="payment-approval-by-pnr" doc:id="f5adc101-4580-45a2-9e74-0c5164b7525f" name="payment-approval-by-pnr"/>
    </munit:execution>
    <munit:validation >
      <munit-tools:assert-that doc:name="assert-payload" doc:id="c7519393-7ee0-47c0-8891-384eee6414c3" is="#[MunitTools::equalTo(TestData::paymentApprovalByPNRResp)]" expression="#[payload]"/>
    </munit:validation>
  </munit:test>

</mule>